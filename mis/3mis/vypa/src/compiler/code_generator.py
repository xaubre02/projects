# -*- coding: UTF-8 -*-
"""
- Project: VYPa19 language compiler
- Author: Tomas Aubrecht (xaubre02), Jan Kotras (xkotra01)
- Date:   2019-10-25
- Desc:   compiler.
"""
from __future__ import unicode_literals

from compiler import SymbolTable, InternalErrorException
from compiler.code_creator import CodeCreator


class CodeGenerator:

    def __init__(self, sym_table: SymbolTable) -> None:
        super().__init__()
        self._global_sym_table = sym_table
        if self._global_sym_table.parent:
            raise InternalErrorException('Global symbol table must not has parent symbol table')
        self._code_creator = CodeCreator.code_creator()
        self._objects = []

    def set_silent_mode(self, silent: bool):
        self._code_creator.silent_mode = silent

    def generate(self) -> str:
        self._generate_header()
        self._generate_constants()
        self._allocate_classes()
        self._generate_main()
        self._generate_functions()
        self._generate_classes()
        self._generate_end()
        return self._code_creator.code()

    def _generate_header(self):
        self._code_creator.comment('/bin/vypint')
        self._code_creator.comment('VYPcode: 1.0')
        self._code_creator.comment('Generated by: xaubre02, xkotra01')

        self._code_creator.comment('')
        self._code_creator.comment('Init interpreter')
        self._code_creator.comment('----------------')
        #aliases
        self._code_creator.alias("FP", "$0")
        self._code_creator.alias("RETVAL", "$1")
        self._code_creator.alias("ACC1", "$2")
        self._code_creator.alias("ACC2", "$3")
        self._code_creator.alias("ACC3", "$4")
        self._code_creator.alias("ACC4", "$5")
        self._code_creator.alias("SELF", "$6")
        self._code_creator.alias("VT", "$7")

        #set values
        self._code_creator.set("$FP", 0)
        self._code_creator.set("$RETVAL", 0)
        self._code_creator.set("$ACC1", 0)
        self._code_creator.set("$ACC2", 0)
        self._code_creator.set("$ACC3", 0)
        self._code_creator.set("$ACC4", 0)
        self._code_creator.set("$SELF", 0)

        self._code_creator.comment('----------------')

    def _generate_main(self):
        self._code_creator.comment('')
        self._code_creator.comment('Call main')
        self._code_creator.comment('----------------')

        #store before
        self._code_creator.addi("$SP", "$SP",1)
        self._code_creator.set("[$SP]", '$FP')
        # -- there store arguments
        self._code_creator.addi("$SP", "$SP", 1)
        #call
        self._code_creator.call('[$SP]', 'main')
        #after return
        self._code_creator.subi("$SP", "$SP", 1)
        # -- there remove arguments
        self._code_creator.set("$FP", "[$SP]")
        self._code_creator.subi("$SP", "$SP", 1)
        self._code_creator.jump('EXIT_LABEL')

        self._code_creator.comment('----------------')

    def _generate_end(self):
        self._code_creator.comment('')
        self._code_creator.comment('')
        self._code_creator.label('EXIT_LABEL')


    def _generate_constants(self):
        pass

    def _generate_functions(self):
        from compiler import Function
        for name, object in self._global_sym_table.symbols.items():
            if not isinstance(object, Function):
                continue
            object.code()

    def _allocate_classes(self):
        from compiler import Class
        for name, object in self._global_sym_table.symbols.items():
            if not isinstance(object, Class):
                continue
            self._objects.append(object)
        index = 0
        for object in self._objects:
            object.cls_index = index
            index += 1
        self._code_creator.comment('')
        self._code_creator.comment('Virtual table')
        self._code_creator.comment('----------------')
        self._code_creator.create("$VT", len(self._objects))
        for object in self._objects:
            object.code_virtual_table(self._code_creator)
            self._code_creator.comment('')

    def _generate_classes(self):
        for object in self._objects:
            object.code()

