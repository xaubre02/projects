/* Databases package */
package pdb18.gui.databases;

/* IMPORTS */
import java.awt.Color;
import java.awt.Component;
import pdb18.connection.OracleDBConnection;

import pdb18.gui.multimedia.Animal;
import pdb18.gui.multimedia.Picture;
import pdb18.gui.multimedia.AnimalList;
import pdb18.gui.multimedia.IDNamePair;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.*;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;

import java.sql.SQLException;

import java.io.IOException;
import java.io.File;

import java.util.ArrayList;
import java.util.Date;

import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ItemEvent;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;

/**
 * The multimedia panel containing all animals saved in the database.
 * Allows user to display, modify, delete or add animals.
 * 
 * @author Tomas Aubrecht (xaubre02@stud.fit.vutbr.cz)
 */
public final class MMPanel extends javax.swing.JPanel {

    /**
     * Creates new form MMPanel
     */
    public MMPanel() {
        initComponents();
        initButtons();
        initialized = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        animalDialog = new javax.swing.JDialog();
        dialogLabelName = new javax.swing.JLabel();
        dialogLabelValidFrom = new javax.swing.JLabel();
        dialogLabelSpecies = new javax.swing.JLabel();
        dialogLabelEnclosure = new javax.swing.JLabel();
        dialogLabelImage = new javax.swing.JLabel();
        dialogInputName = new javax.swing.JTextField();
        dialogInputValidFrom = new org.jdesktop.swingx.JXDatePicker();
        dialogAddButton = new javax.swing.JButton();
        dialogCancelButton = new javax.swing.JButton();
        dialogBrowse = new javax.swing.JButton();
        dialogInputFile = new javax.swing.JTextField();
        comboDialogSpecies = new javax.swing.JComboBox<>();
        comboDialogEnclosure = new javax.swing.JComboBox<>();
        dialogLabelID = new javax.swing.JLabel();
        dialogInputID = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        itemList = new javax.swing.JList<>();
        imgWrapper = new javax.swing.JPanel();
        imgHolder = new javax.swing.JLabel();
        noImgLabel = new javax.swing.JLabel();
        animalDBPanel = new javax.swing.JPanel();
        butonAddAnimal = new javax.swing.JButton();
        buttonDeleteAnimal = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        animalDataPanel = new javax.swing.JPanel();
        labelID = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        labelValidFrom = new javax.swing.JLabel();
        labelValidTo = new javax.swing.JLabel();
        labelSpecies = new javax.swing.JLabel();
        labelEnclosure = new javax.swing.JLabel();
        textFieldID = new javax.swing.JTextField();
        textFieldName = new javax.swing.JTextField();
        dateValidFrom = new org.jdesktop.swingx.JXDatePicker();
        dateValidTo = new org.jdesktop.swingx.JXDatePicker();
        comboSpecies = new javax.swing.JComboBox<>();
        comboEnclosure = new javax.swing.JComboBox<>();
        animalPicEditPanel = new javax.swing.JPanel();
        butttonChangeImg = new javax.swing.JButton();
        buttonDeleteImg = new javax.swing.JButton();
        buttonRotateLeft = new javax.swing.JButton();
        buttonRotateRight = new javax.swing.JButton();
        buttonHorizontalFlip = new javax.swing.JButton();
        buttonVerticalFlip = new javax.swing.JButton();
        labelImgRotation = new javax.swing.JLabel();
        labelImgFlip = new javax.swing.JLabel();
        labelImgBrightness = new javax.swing.JLabel();
        buttonBrightnessMinus = new javax.swing.JButton();
        buttonBrightnessPlus = new javax.swing.JButton();
        animalChangesPanel = new javax.swing.JPanel();
        buttonSaveAnimal = new javax.swing.JButton();
        buttonCancelAnimal = new javax.swing.JButton();
        animalSearchPanel = new javax.swing.JPanel();
        buttonSearchCurButton = new javax.swing.JButton();
        buttonSearchFileButton = new javax.swing.JButton();
        labelView = new javax.swing.JLabel();
        comboView = new javax.swing.JComboBox<>();
        labelEncFilter = new javax.swing.JLabel();
        comboEncFilter = new javax.swing.JComboBox<>();

        animalDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        animalDialog.setTitle("Přidat zvíře");
        animalDialog.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        animalDialog.setMinimumSize(new java.awt.Dimension(290, 400));
        animalDialog.setModal(true);

        dialogLabelName.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dialogLabelName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dialogLabelName.setText("Název");

        dialogLabelValidFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dialogLabelValidFrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dialogLabelValidFrom.setText("Validní od");

        dialogLabelSpecies.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dialogLabelSpecies.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dialogLabelSpecies.setText("Druh");

        dialogLabelEnclosure.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dialogLabelEnclosure.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dialogLabelEnclosure.setText("Výběh");

        dialogLabelImage.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dialogLabelImage.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dialogLabelImage.setText("Obrázek");

        dialogInputName.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        dialogInputValidFrom.setForeground(new java.awt.Color(68, 68, 68));
        dialogInputValidFrom.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        dialogAddButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        dialogAddButton.setText("Přidat");
        dialogAddButton.setFocusable(false);
        dialogAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialogAddButtonActionPerformed(evt);
            }
        });

        dialogCancelButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        dialogCancelButton.setText("Zrušit");
        dialogCancelButton.setFocusable(false);
        dialogCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialogCancelButtonActionPerformed(evt);
            }
        });

        dialogBrowse.setText("Procházet");
        dialogBrowse.setFocusable(false);
        dialogBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialogBrowseActionPerformed(evt);
            }
        });

        dialogInputFile.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        dialogInputFile.setEnabled(false);
        dialogInputFile.setFocusable(false);

        dialogLabelID.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dialogLabelID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dialogLabelID.setText(" Číslo zvíř.");

        dialogInputID.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        javax.swing.GroupLayout animalDialogLayout = new javax.swing.GroupLayout(animalDialog.getContentPane());
        animalDialog.getContentPane().setLayout(animalDialogLayout);
        animalDialogLayout.setHorizontalGroup(
            animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, animalDialogLayout.createSequentialGroup()
                        .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(animalDialogLayout.createSequentialGroup()
                                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dialogLabelEnclosure, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dialogLabelSpecies, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dialogLabelName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dialogLabelValidFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dialogLabelImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dialogLabelID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboDialogEnclosure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboDialogSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dialogInputValidFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dialogInputName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dialogBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dialogInputID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(animalDialogLayout.createSequentialGroup()
                                .addGap(0, 6, Short.MAX_VALUE)
                                .addComponent(dialogInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, animalDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dialogAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dialogCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addGap(55, 55, 55))))
        );

        animalDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboDialogEnclosure, comboDialogSpecies, dialogInputName, dialogInputValidFrom});

        animalDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dialogAddButton, dialogCancelButton});

        animalDialogLayout.setVerticalGroup(
            animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dialogLabelID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dialogInputID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dialogLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dialogInputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dialogLabelValidFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dialogInputValidFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dialogLabelSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboDialogSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dialogLabelEnclosure, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboDialogEnclosure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dialogLabelImage)
                    .addComponent(dialogBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dialogInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(animalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dialogCancelButton)
                    .addComponent(dialogAddButton))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        animalDialogLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboDialogEnclosure, comboDialogSpecies, dialogInputName, dialogInputValidFrom});

        animalDialogLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dialogLabelEnclosure, dialogLabelImage, dialogLabelName, dialogLabelSpecies, dialogLabelValidFrom});

        animalDialogLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dialogAddButton, dialogCancelButton});

        setFocusable(false);
        setMinimumSize(new java.awt.Dimension(792, 552));

        itemList.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        itemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                itemListValueChanged(evt);
            }
        });
        scrollPane.setViewportView(itemList);

        imgWrapper.setBackground(new java.awt.Color(255, 255, 255));
        imgWrapper.setMinimumSize(new java.awt.Dimension(425, 495));
        imgWrapper.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                imgWrapperComponentResized(evt);
            }
        });
        imgWrapper.setLayout(new java.awt.GridBagLayout());

        imgHolder.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        imgHolder.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        imgHolder.setAlignmentY(0.0F);
        imgHolder.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imgHolder.setMinimumSize(new java.awt.Dimension(627, 485));
        imgWrapper.add(imgHolder, new java.awt.GridBagConstraints());

        noImgLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        noImgLabel.setText("Obrázek není dostupný");
        imgWrapper.add(noImgLabel, new java.awt.GridBagConstraints());

        animalDBPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Zvířata"));
        animalDBPanel.setName("Zvíře"); // NOI18N

        butonAddAnimal.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        butonAddAnimal.setText("Přidat");
        butonAddAnimal.setFocusable(false);
        butonAddAnimal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butonAddAnimal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butonAddAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butonAddAnimalActionPerformed(evt);
            }
        });

        buttonDeleteAnimal.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        buttonDeleteAnimal.setText("Smazat");
        buttonDeleteAnimal.setFocusable(false);
        buttonDeleteAnimal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDeleteAnimal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonDeleteAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteAnimalActionPerformed(evt);
            }
        });

        buttonRefresh.setFocusable(false);
        buttonRefresh.setMaximumSize(new java.awt.Dimension(31, 31));
        buttonRefresh.setMinimumSize(new java.awt.Dimension(31, 31));
        buttonRefresh.setPreferredSize(new java.awt.Dimension(36, 36));
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout animalDBPanelLayout = new javax.swing.GroupLayout(animalDBPanel);
        animalDBPanel.setLayout(animalDBPanelLayout);
        animalDBPanelLayout.setHorizontalGroup(
            animalDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalDBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(butonAddAnimal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDeleteAnimal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        animalDBPanelLayout.setVerticalGroup(
            animalDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalDBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(animalDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(butonAddAnimal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonDeleteAnimal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        animalDataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Informace"));

        labelID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelID.setText("ID zvířete");

        labelName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelName.setText("Jméno");

        labelValidFrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelValidFrom.setText("Validní od");

        labelValidTo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelValidTo.setText("Validní do");

        labelSpecies.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelSpecies.setText("Druh");

        labelEnclosure.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelEnclosure.setText("Výběh");

        textFieldID.setEnabled(false);

        dateValidFrom.setForeground(new java.awt.Color(68, 68, 68));
        dateValidFrom.setEnabled(false);

        dateValidTo.setForeground(new java.awt.Color(68, 68, 68));

        javax.swing.GroupLayout animalDataPanelLayout = new javax.swing.GroupLayout(animalDataPanel);
        animalDataPanel.setLayout(animalDataPanelLayout);
        animalDataPanelLayout.setHorizontalGroup(
            animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelID)
                    .addGroup(animalDataPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelValidFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelValidTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelSpecies, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelEnclosure, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, animalDataPanelLayout.createSequentialGroup()
                        .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2))
                    .addComponent(dateValidFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateValidTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(comboEnclosure, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboSpecies, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );

        animalDataPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboEnclosure, comboSpecies, dateValidFrom, dateValidTo, textFieldID, textFieldName});

        animalDataPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {labelEnclosure, labelID, labelName, labelSpecies, labelValidFrom, labelValidTo});

        animalDataPanelLayout.setVerticalGroup(
            animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelValidFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateValidFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelValidTo, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateValidTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEnclosure, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboEnclosure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        animalDataPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {labelEnclosure, labelID, labelName, labelSpecies, labelValidFrom, labelValidTo});

        animalDataPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboEnclosure, comboSpecies, dateValidFrom, dateValidTo, textFieldID, textFieldName});

        animalPicEditPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Úpravy obrázku"));
        animalPicEditPanel.setMaximumSize(new java.awt.Dimension(204, 32767));

        butttonChangeImg.setText("Nahrát");
        butttonChangeImg.setFocusable(false);
        butttonChangeImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butttonChangeImgActionPerformed(evt);
            }
        });

        buttonDeleteImg.setText("Smazat");
        buttonDeleteImg.setFocusable(false);
        buttonDeleteImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteImgActionPerformed(evt);
            }
        });

        buttonRotateLeft.setFocusable(false);
        buttonRotateLeft.setMaximumSize(new java.awt.Dimension(36, 36));
        buttonRotateLeft.setMinimumSize(new java.awt.Dimension(36, 36));
        buttonRotateLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRotateLeftActionPerformed(evt);
            }
        });

        buttonRotateRight.setFocusable(false);
        buttonRotateRight.setMaximumSize(new java.awt.Dimension(36, 36));
        buttonRotateRight.setMinimumSize(new java.awt.Dimension(36, 36));
        buttonRotateRight.setPreferredSize(new java.awt.Dimension(36, 36));
        buttonRotateRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRotateRightActionPerformed(evt);
            }
        });

        buttonHorizontalFlip.setFocusable(false);
        buttonHorizontalFlip.setMaximumSize(new java.awt.Dimension(36, 36));
        buttonHorizontalFlip.setMinimumSize(new java.awt.Dimension(36, 36));
        buttonHorizontalFlip.setPreferredSize(new java.awt.Dimension(36, 36));
        buttonHorizontalFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHorizontalFlipActionPerformed(evt);
            }
        });

        buttonVerticalFlip.setFocusable(false);
        buttonVerticalFlip.setMaximumSize(new java.awt.Dimension(36, 36));
        buttonVerticalFlip.setMinimumSize(new java.awt.Dimension(36, 36));
        buttonVerticalFlip.setPreferredSize(new java.awt.Dimension(36, 36));
        buttonVerticalFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVerticalFlipActionPerformed(evt);
            }
        });

        labelImgRotation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelImgRotation.setText("Rotace");

        labelImgFlip.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelImgFlip.setText("Převrácení");

        labelImgBrightness.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelImgBrightness.setText("Jas");

        buttonBrightnessMinus.setFocusable(false);
        buttonBrightnessMinus.setMaximumSize(new java.awt.Dimension(36, 36));
        buttonBrightnessMinus.setMinimumSize(new java.awt.Dimension(36, 36));
        buttonBrightnessMinus.setPreferredSize(new java.awt.Dimension(36, 36));
        buttonBrightnessMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBrightnessMinusActionPerformed(evt);
            }
        });

        buttonBrightnessPlus.setFocusable(false);
        buttonBrightnessPlus.setMaximumSize(new java.awt.Dimension(36, 36));
        buttonBrightnessPlus.setMinimumSize(new java.awt.Dimension(36, 36));
        buttonBrightnessPlus.setPreferredSize(new java.awt.Dimension(36, 36));
        buttonBrightnessPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBrightnessPlusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout animalPicEditPanelLayout = new javax.swing.GroupLayout(animalPicEditPanel);
        animalPicEditPanel.setLayout(animalPicEditPanelLayout);
        animalPicEditPanelLayout.setHorizontalGroup(
            animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalPicEditPanelLayout.createSequentialGroup()
                .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(animalPicEditPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelImgRotation, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelImgFlip, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelImgBrightness, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(animalPicEditPanelLayout.createSequentialGroup()
                                .addComponent(buttonBrightnessPlus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonBrightnessMinus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, animalPicEditPanelLayout.createSequentialGroup()
                                .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(buttonHorizontalFlip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonRotateLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonRotateRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonVerticalFlip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, animalPicEditPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(butttonChangeImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDeleteImg, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );

        animalPicEditPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {labelImgBrightness, labelImgFlip, labelImgRotation});

        animalPicEditPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonDeleteImg, butttonChangeImg});

        animalPicEditPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonBrightnessMinus, buttonBrightnessPlus, buttonHorizontalFlip, buttonRotateLeft, buttonRotateRight, buttonVerticalFlip});

        animalPicEditPanelLayout.setVerticalGroup(
            animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalPicEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDeleteImg)
                    .addComponent(butttonChangeImg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonRotateRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRotateLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(animalPicEditPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(labelImgRotation)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(animalPicEditPanelLayout.createSequentialGroup()
                        .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonHorizontalFlip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonVerticalFlip, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, animalPicEditPanelLayout.createSequentialGroup()
                        .addComponent(labelImgFlip)
                        .addGap(18, 18, 18)))
                .addGroup(animalPicEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonBrightnessPlus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonBrightnessMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, animalPicEditPanelLayout.createSequentialGroup()
                        .addComponent(labelImgBrightness)
                        .addGap(12, 12, 12)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        animalPicEditPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {labelImgBrightness, labelImgFlip, labelImgRotation});

        animalPicEditPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttonBrightnessMinus, buttonBrightnessPlus, buttonHorizontalFlip, buttonRotateLeft, buttonRotateRight, buttonVerticalFlip});

        animalChangesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Změny"));

        buttonSaveAnimal.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        buttonSaveAnimal.setText("Uložit");
        buttonSaveAnimal.setFocusable(false);
        buttonSaveAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveAnimalActionPerformed(evt);
            }
        });

        buttonCancelAnimal.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        buttonCancelAnimal.setText("Zrušit");
        buttonCancelAnimal.setFocusable(false);
        buttonCancelAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelAnimalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout animalChangesPanelLayout = new javax.swing.GroupLayout(animalChangesPanel);
        animalChangesPanel.setLayout(animalChangesPanelLayout);
        animalChangesPanelLayout.setHorizontalGroup(
            animalChangesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalChangesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonSaveAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonCancelAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        animalChangesPanelLayout.setVerticalGroup(
            animalChangesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalChangesPanelLayout.createSequentialGroup()
                .addGroup(animalChangesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSaveAnimal)
                    .addComponent(buttonCancelAnimal))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        animalSearchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Podobný obrázek"));

        buttonSearchCurButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        buttonSearchCurButton.setText("Aktuálnímu");
        buttonSearchCurButton.setFocusable(false);
        buttonSearchCurButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchCurButtonActionPerformed(evt);
            }
        });

        buttonSearchFileButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        buttonSearchFileButton.setText("Soubor");
        buttonSearchFileButton.setFocusable(false);
        buttonSearchFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout animalSearchPanelLayout = new javax.swing.GroupLayout(animalSearchPanel);
        animalSearchPanel.setLayout(animalSearchPanelLayout);
        animalSearchPanelLayout.setHorizontalGroup(
            animalSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonSearchCurButton)
                .addGap(18, 18, 18)
                .addComponent(buttonSearchFileButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        animalSearchPanelLayout.setVerticalGroup(
            animalSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animalSearchPanelLayout.createSequentialGroup()
                .addGroup(animalSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSearchCurButton)
                    .addComponent(buttonSearchFileButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        labelView.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelView.setText("Zobrazit");

        comboView.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Všechny", "Současné", "Bývalé" }));
        comboView.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboViewItemStateChanged(evt);
            }
        });

        labelEncFilter.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelEncFilter.setText("Ve výběhu");

        comboEncFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Libovolný" }));
        comboEncFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboEncFilterItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelEncFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboEncFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(animalChangesPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(animalPicEditPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(animalDataPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(animalDBPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(animalSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgWrapper, javax.swing.GroupLayout.PREFERRED_SIZE, 316, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imgWrapper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(animalDBPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelView, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelEncFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboEncFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(animalDataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(animalPicEditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(animalChangesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(animalSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initialize icons of the image editing buttons.
     */
    public void initButtons() {
        int h = 20, w = 20;
        Insets insets= new Insets(0, 0, 0, 0);
        // load icons
        ImageIcon refresh = new ImageIcon("src/main/resources/icons/refresh.png");
        ImageIcon rLeft   = new ImageIcon("src/main/resources/icons/rotate_left.png");
        ImageIcon rRight  = new ImageIcon("src/main/resources/icons/rotate_right.png");
        ImageIcon flipH   = new ImageIcon("src/main/resources/icons/flip_horizontal.png");
        ImageIcon flipV   = new ImageIcon("src/main/resources/icons/flip_vertical.png");
        ImageIcon conPl   = new ImageIcon("src/main/resources/icons/plus.png");
        ImageIcon conMi   = new ImageIcon("src/main/resources/icons/minus.png");
        
        // set zero margins
        buttonRefresh.setMargin(insets);
        buttonRotateLeft.setMargin(insets);
        buttonRotateRight.setMargin(insets);
        buttonHorizontalFlip.setMargin(insets);
        buttonVerticalFlip.setMargin(insets);
        buttonBrightnessPlus.setMargin(insets);
        buttonBrightnessMinus.setMargin(insets);
        
        // set icons
        Image scaledImg = refresh.getImage().getScaledInstance(h, w, Image.SCALE_SMOOTH);
        buttonRefresh.setIcon(new ImageIcon(scaledImg));

        scaledImg = rLeft.getImage().getScaledInstance(h, w, Image.SCALE_SMOOTH);
        buttonRotateLeft.setIcon(new ImageIcon(scaledImg));
        
        scaledImg = rRight.getImage().getScaledInstance(h, w, Image.SCALE_SMOOTH);
        buttonRotateRight.setIcon(new ImageIcon(scaledImg));

        scaledImg = flipH.getImage().getScaledInstance(h, w, Image.SCALE_SMOOTH);
        buttonHorizontalFlip.setIcon(new ImageIcon(scaledImg));

        scaledImg = flipV.getImage().getScaledInstance(h, w, Image.SCALE_SMOOTH);
        buttonVerticalFlip.setIcon(new ImageIcon(scaledImg));
        
        scaledImg = conPl.getImage().getScaledInstance(h, w, Image.SCALE_SMOOTH);
        buttonBrightnessPlus.setIcon(new ImageIcon(scaledImg));
        
        scaledImg = conMi.getImage().getScaledInstance(h, w, Image.SCALE_SMOOTH);
        buttonBrightnessMinus.setIcon(new ImageIcon(scaledImg));
    }

    /**
     * Initializes the content of the database and displays it in GUI.
     */
    public void initContent() {
        if (initialized) return;
        
        noImgLabel.setVisible(false);
        animalList = new AnimalList();
        // center the animal adding dialog
        animalDialog.setLocationRelativeTo(null);
        selectedFile = null;

        initComboBoxes();
        initDatePickers();
        
        // override cell renderer to draw temporally invalid animals with red color
        itemList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component c = super.getListCellRendererComponent( list, value, index, isSelected, cellHasFocus );

                Animal a = animalList.get(index);
                if ( a.getValid_to() != null ) {
                    c.setForeground(Color.RED);
                }
                return c;
            }
        });
        
        // get the animals from the database
        try {
            // get id of enclosure to be filtered
            int filterIndex = comboEncFilter.getSelectedIndex();
            // enclosures are selected to combobox - fix for empty database
            int id_enclosure = 0;
            if (filterIndex != -1)
                enclosureFilterList.get(filterIndex).getID();
        
            animalList.fill(OracleDBConnection.getConnection(), comboView.getSelectedIndex(), id_enclosure);
        } catch (SQLException sqlException) {
            JOptionPane.showMessageDialog(this,
                    sqlException.getMessage(),
                    "SQL Chyba",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        // initialize the list of animals displayed in GUI
        itemListModel = new DefaultListModel();
        animalList.forEach((animal) -> {
            itemListModel.addElement(animal.getName());
        });

        itemList.setModel(itemListModel);


        // select the first item 
        if (!itemListModel.isEmpty()) {
            itemList.setSelectedIndex(0);
            prevIndex = 0;
        }
        
        initialized = true;
    }
    
    /**
     * Initialize the combo boxes with the content from the database.
     */
    public void initComboBoxes() {
        DefaultComboBoxModel cbmSpecies = new DefaultComboBoxModel();
        DefaultComboBoxModel cbmEnclosure = new DefaultComboBoxModel();
        
        DefaultComboBoxModel cbmDiaSpecies = new DefaultComboBoxModel();
        DefaultComboBoxModel cbmDiaEnclosure = new DefaultComboBoxModel();
        
        DefaultComboBoxModel cbmEnclosureFilter = new DefaultComboBoxModel();
        
        speciesList = new ArrayList();
        enclosureList = new ArrayList();
        enclosureFilterList = new ArrayList();
        
        try {
            speciesList = Animal.getAllAnimalSpecies(OracleDBConnection.getConnection());
            enclosureList = Animal.getValidAnimalEnclosures(OracleDBConnection.getConnection());
            enclosureFilterList = Animal.getAllAnimalEnclosures(OracleDBConnection.getConnection());
        } catch (SQLException sqlException) {
            JOptionPane.showMessageDialog(this,
                    sqlException.getMessage(),
                    "SQL Chyba",
                    JOptionPane.ERROR_MESSAGE);
        }

        speciesList.forEach((species) -> {
            cbmSpecies.addElement(species);
            cbmDiaSpecies.addElement(species);
        });

        enclosureList.forEach((enclosure) -> {
            cbmEnclosure.addElement(enclosure);
            cbmDiaEnclosure.addElement(enclosure);
        });
        
        enclosureFilterList.forEach((enclosure) -> {
            cbmEnclosureFilter.addElement(enclosure);
        });

        comboSpecies.setModel(cbmSpecies);
        comboEnclosure.setModel(cbmEnclosure);

        comboDialogSpecies.setModel(cbmDiaSpecies);
        comboDialogEnclosure.setModel(cbmDiaEnclosure);
        
        comboEncFilter.setModel(cbmEnclosureFilter);
    }

    /**
     * Set the format of the date pickers in application window and in dialog window.
     */
    private void initDatePickers() {
	java.text.SimpleDateFormat format = new java.text.SimpleDateFormat( "dd.MM.yyyy" );
        final Date startDate = new java.util.Date(0);  //01.01.1970
        format.set2DigitYearStart(startDate);

        dateValidFrom.setFormats(format);
	dateValidTo.setFormats(format);
        dialogInputValidFrom.setFormats(format);
    }

    /**
     * Create a new FileChooser initialized with the directory of the last used file or home directory.
     * 
     * @return new FileChooser
     */
    private JFileChooser initFileChooser() {
        // initialize a filechooser
        JFileChooser fileChooser;
        // select last used dir
        if (selectedFile != null) {
            fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getParentDirectory(selectedFile));
        }
        else {
            fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        }
        
        FileFilter filter = new FileNameExtensionFilter("Supported (GIF)", "gif");
        fileChooser.setFileFilter(filter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        
        return fileChooser;
    }
    
    /**
     * Check the user input. Return true if animal data are valid, else false.
     * 
     * @param name  name of the animal
     * @param validFrom date of the start of validity of the animal
     * @param validTo   date of the end of validity of the animal
     * @return valid animal flag
     */
    private boolean checkAnimalInput(String id, String name, Date validFrom, Date validTo, boolean newAnimal) {
        String errMsg = "";
        boolean correct = true;
        boolean validToCheck = validTo != null && validTo.before(validFrom);
        
        // ID is not specified or not a positive integer
        if (id.length() == 0) {
            errMsg = "Musíte zadat číslo zvířete";
            correct = false;
        }
        
        // name is not specified
        if (name.length() == 0) {
            errMsg = "Zvíře musí mít zadané jméno";
            correct = false;
        }
        // start of the validity is not specified
        else if (validFrom == null) {
            errMsg = "Zvíře musí mít platné datum počátku platnosti";
            correct = false;
        }
        // end of validity is before its start
        else if (validToCheck) {
            errMsg = "Zvíře nemohlo nabýt neplastnosti dříve než platnosti";
            correct = false;
        }
        
        try {
            // check if ID is an integer if specified
            if (id.length() > 0) {
                int animalID = Integer.parseInt(id);
                if (animalID < 1) {
                    throw new NumberFormatException();
                }
                // check if ID is available
                if (newAnimal) {
                    try {
                        int firstID = Animal.getFirstAvailableID(OracleDBConnection.getConnection(), animalID);
                        if (firstID != animalID) {
                            errMsg = "Zadané číslo zvířete je již použité.\nPrvní dostupné je " + firstID + ".";
                            correct = false;
                        }
                        
                    } catch (SQLException ex) {
                        errMsg = "Chyba kontroly ID: " + ex.getMessage();
                        correct = false;
                    }
                }
            }
        } catch (NumberFormatException e) {
            errMsg = "Číslo zvířete musí být kladné nenulové celé číslo";
            correct = false;
        }
        
        if (!correct) {
            JOptionPane.showMessageDialog(this,
                errMsg,
                "Chyba vstupu",
                JOptionPane.ERROR_MESSAGE);
        }
        return correct;
    }
    
    /**
     * Initialize the animal addition dialog with default values.
     */
    private void clearAnimalDialog() {       
        dialogInputID.setText("");
        dialogInputName.setText("");
        dialogInputValidFrom.setDate(null);
        dialogInputFile.setText("");
        
        comboDialogSpecies.setSelectedIndex(0);
        comboDialogEnclosure.setSelectedIndex(0);
    }
    
    /**
     * Check whether user made any changes to the animal.
     * 
     * @param index index of the animal to compare with input
     * @return true if the input differs, else false
     */
    private boolean inputDiffersFromAnimal(int index) {
        Animal animal = animalList.get(index);

        // check whether start of validity differs
        boolean valFrom;
        valFrom = dateValidFrom.getDate().compareTo(new Date(animal.getValid_from().getTime())) != 0;
        
        // check whether end of validity differs
        boolean valTo;
        if (animal.getValid_to() != null) {
            // end of the animal validity is not null, so input cannot be null
            if (dateValidTo.getDate() == null) {
                valTo = true;
            }
            else {
                valTo = dateValidTo.getDate().compareTo(new Date(animal.getValid_to().getTime())) != 0;
            }
        }
        else {
            // animal validity end is null, so input must be also null
            valTo = dateValidTo.getDate() != null;
        }
        
        int specIndex = comboSpecies.getSelectedIndex();
        int enclIndex = comboEnclosure.getSelectedIndex();

        return (!textFieldName.getText().equals(animal.getName()) ||                // animal name has changed
                speciesList.get(specIndex).getID() != animal.getSpeciesID() ||      // animal species ID has changed
                enclosureList.get(enclIndex).getID() != animal.getEnclosureID() ||  // animal enclosure ID has changed
                valFrom ||                                                          // animal validity from has changed
                valTo ||                                                            // animal validity to has changed
                animal.getPicture().isModified());                                  // animal picture has changed
    }
    
    /**
     * Check whether user made any changes to the animal.
     * Ask user if he/she wants to save or discard the changes.
     */
    private void checkChanges() {
        if (!initialized || prevIndex == -1) return;
        
        if (inputDiffersFromAnimal(prevIndex)) {
        
            Object[] options = {"Uložit", "Zrušit"};
            int n = JOptionPane.showOptionDialog(this, 
                    "Přejete si uložit provedené změny?",
                    "Data byla změněna",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, 
                    null, 
                    options, 
                    options[0]);

            if (n == 0) {
                // info for user - cannot update valid_to on future date
                if (dateValidTo.getDate() != null) {
                    if (dateValidTo.getDate().getTime() > new java.util.Date().getTime()) {
                        JOptionPane.showMessageDialog(this,
                            "Hodnota 'Validní do' nemůže být v budoucnosti.",
                            "Chyba",
                            JOptionPane.ERROR_MESSAGE);
                        return;
                    }  
                }
                
                if (checkAnimalInput(textFieldID.getText(), textFieldName.getText(), dateValidFrom.getDate(), dateValidTo.getDate(), false)) {
                    updateAnimal(animalList.get(prevIndex));
                    animalList.get(prevIndex).getPicture().saveChanges();
                }
            } else {
                try {
                    animalList.get(prevIndex).getPicture().restoreChanges();
                } catch (SQLException | IOException ex) {
                    JOptionPane.showMessageDialog(this,
                        "Nepodařilo se vrátit změny: " + ex.getMessage(),
                        "Chyba",
                        JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    /**
     * Update the animal with the user input and save it to the database.
     * 
     * @param animal animal to be updated
     */
    private void updateAnimal(Animal animal) {
        int specIndex = comboSpecies.getSelectedIndex();
        int enclIndex = comboEnclosure.getSelectedIndex();
        
        animal.setName(textFieldName.getText());
        animal.setSpecies(speciesList.get(specIndex).getID());
        animal.setEnclosure(enclosureList.get(enclIndex).getID());
        animal.setValid_from(new java.sql.Date(dateValidFrom.getDate().getTime()));
        if (dateValidTo.getDate() != null) {
            animal.setValid_to(new java.sql.Date(dateValidTo.getDate().getTime()));
        }
        else {
            animal.setValid_to(null);
        }

        try {
            animal.updateInDB(OracleDBConnection.getConnection());
            
            // refresh animal list after updating selected animal
            reinitializeAnimalList(itemList.getSelectedIndex());
            
            JOptionPane.showMessageDialog(this, 
                    "Hodnoty byly úspěšně aktualizovány",
                    "Úpravy zvířete",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                    ex.getMessage(),
                    "SQL Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Display the attributes of the animal in the multimedia panel.
     * 
     * @param animal animal which attributes will be displayed
     */
    private void displayData(Animal animal) {
        // forbid changes for past animal records
        if (animal.getValid_to() != null) {
            textFieldName.setEnabled(false);
            dateValidTo.setEnabled(false);
            comboSpecies.setEnabled(false);
            comboEnclosure.setEnabled(false);
        }
        else { // allow changes for valid animal records
            textFieldName.setEnabled(true);
            dateValidTo.setEnabled(true);
            comboSpecies.setEnabled(true);
            comboEnclosure.setEnabled(true);
        }
        
        textFieldID.setText(Integer.toString(animal.getAnimalID()));
        textFieldName.setText(animal.getName());
        
        for (int i = 0; i < speciesList.size(); i++) {
            if (speciesList.get(i).getID() == animal.getSpeciesID()) {
                comboSpecies.setSelectedIndex(i);
                break;
            }
        }
        
        for (int i = 0; i < enclosureList.size(); i++) {
            if (enclosureList.get(i).getID() == animal.getEnclosureID()) {
                comboEnclosure.setSelectedIndex(i);
                break;
            }
        }

        /* Set the validity start */
        if (animal.getValid_from() == null) {
            dateValidFrom.setDate(null);
        }
        else{
            dateValidFrom.setDate(new Date(animal.getValid_from().getTime()));
        }
        /* Set the validity end */
        if (animal.getValid_to() == null) {
            dateValidTo.setDate(null);
        }
        else{
            dateValidTo.setDate(new Date(animal.getValid_to().getTime()));
        }
    }
    
    /**
     * Display the image of the animal in the multimedia panel.
     * 
     * @param imgIcon image which will be displayed
     */
    private void displayImage(ImageIcon imgIcon) {
        /* imgIcon is not available */
        if (imgIcon == null) {
            imgHolder.setVisible(false);
            noImgLabel.setVisible(true);
            return;
        }
        else {
            noImgLabel.setVisible(false);
            imgHolder.setVisible(true);
        }

        /* Calculate the scale ratio */
        float panelWidth  = imgWrapper.getWidth();
        float panelHeight = imgWrapper.getHeight();

        // imgWrapper is not yet initialized
        if (!initialized) {
            panelWidth = 606;
            panelHeight = 709;
        }

        float iconWidth   = imgIcon.getIconWidth();
        float iconHeight  = imgIcon.getIconHeight();
        float ratio = Math.min(panelWidth / iconWidth, panelHeight / iconHeight);
        
        int resWidth = (int)(iconWidth * ratio);
        int resHeight = (int)(iconHeight * ratio);

        /* Scale the image */
        Image scaledImg = imgIcon.getImage().getScaledInstance(resWidth, resHeight, Image.SCALE_SMOOTH);

        /* Display image */
        imgHolder.setIcon(new ImageIcon(scaledImg));
    }
    
    
    private void reinitializeAnimalList(int animalID) {
        // reinitialize the list of animals displayed in GUI
        itemListModel.removeAllElements();
        animalList.clear();

        // get the animals from the database
        try {
            // get id of enclosure to be filtered
            int filterIndex = comboEncFilter.getSelectedIndex();
            // enclosures are selected to combobox - fix for empty database
            int id_enclosure = 0;
            if (filterIndex != -1)
                enclosureFilterList.get(filterIndex).getID();
            
            animalList.fill(OracleDBConnection.getConnection(), comboView.getSelectedIndex(), id_enclosure);
        } catch (SQLException sqlException) {
            JOptionPane.showMessageDialog(this,
                    sqlException.getMessage(),
                    "SQL Chyba",
                    JOptionPane.ERROR_MESSAGE);
        }

        animalList.forEach((animal) -> {
            itemListModel.addElement(animal.getName());
        });

        itemList.setModel(itemListModel);

        if (animalID != -1) {
            itemList.setSelectedIndex(animalID);
            prevIndex = animalID;
        }
        else {
            itemList.setSelectedIndex(0);
            prevIndex = 0;
        }
    }
    

    private void itemListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_itemListValueChanged
        if (!evt.getValueIsAdjusting()) {
            int index = itemList.getSelectedIndex();
            if (index == -1) {
                prevIndex = -1;
                return;
            }
            
            Animal animal = animalList.get(index);
            // check if previous animal has changed and ask if user want to save changes
            checkChanges();
            prevIndex = index;
            displayData(animal);
            try {
                displayImage(animal.getPicture().getImageIcon());
            } catch (SQLException | IOException ex) {
                JOptionPane.showMessageDialog(this,
                    "Nepodařilo se zobrazit obrázek: " + ex.getMessage(),
                    "Chyba",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_itemListValueChanged

    private void butonAddAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butonAddAnimalActionPerformed
        clearAnimalDialog();
        animalDialog.setVisible(true);
    }//GEN-LAST:event_butonAddAnimalActionPerformed

    private void buttonDeleteAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteAnimalActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
        
        // info for user - cannot delete past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze odstranit, respektive ukončit jeho platnost.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Object[] options = {"Odstranit", "Zrušit"};
        int n = JOptionPane.showOptionDialog(this, 
                "Opravdu chcete odstranit dané zvíře z databáze?",
                "Odstranit zvíře",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                options, 
                options[0]);
        // deletion canceled
        if (n == 1) return;

        try {
            // call delete procedure
            animalList.get(index).deleteFromDB();
            
            // refresh animal list after deleting selected animal
            reinitializeAnimalList(index);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                    ex.getMessage(),
                    "SQL Chyba",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeleteAnimalActionPerformed

    private void buttonCancelAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelAnimalActionPerformed
        int index = itemList.getSelectedIndex();
        if (index == -1) return;
        
        displayData(animalList.get(index));
        try {
            Picture pic = animalList.get(index).getPicture();
            pic.restoreChanges();
            displayImage(pic.getImageIcon());
        } catch (SQLException | IOException ex) {
                    JOptionPane.showMessageDialog(this,
                        "Nepodařilo se vrátit změny: " + ex.getMessage(),
                        "Chyba",
                        JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonCancelAnimalActionPerformed

    private void buttonSaveAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveAnimalActionPerformed
        int index = itemList.getSelectedIndex();
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze provádět změny.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        // info for user - cannot update valid_to on future date
        if (dateValidTo.getDate() != null) {
            if (dateValidTo.getDate().getTime() > new java.util.Date().getTime()) {
                JOptionPane.showMessageDialog(this,
                    "Hodnota 'Validní do' nemůže být v budoucnosti.",
                    "Chyba",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }  
        }
        
        if (inputDiffersFromAnimal(index)) {
            animalList.get(index).getPicture().saveChanges();
            if (checkAnimalInput(textFieldID.getText(), textFieldName.getText(), dateValidFrom.getDate(), dateValidTo.getDate(), false)) {
                updateAnimal(animalList.get(prevIndex));
            }
        }
    }//GEN-LAST:event_buttonSaveAnimalActionPerformed

    private void dialogAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dialogAddButtonActionPerformed
        String id = dialogInputID.getText();
        String name = dialogInputName.getText();
        Date validFrom = dialogInputValidFrom.getDate();

        int specIndex = comboDialogSpecies.getSelectedIndex();
        int enclIndex = comboDialogEnclosure.getSelectedIndex();
        
        int species = speciesList.get(specIndex).getID();
        int enclosure = enclosureList.get(enclIndex).getID();
        
        if (checkAnimalInput(id, name, validFrom, null, true)) {
            // create a new animal
            Animal animal = new Animal(OracleDBConnection.getConnection(),
                                       Integer.parseInt(id),
                                       species,
                                       enclosure,
                                       name, 
                                       new java.sql.Date(validFrom.getTime()), 
                                       null);
            // save the animal
            try {
                animal.saveToDB();
                animalList.add(animal);
                itemListModel.addElement(animal);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                    "Nepodařilo se uložit zvíře: " + ex.getMessage(),
                    "Chyba",
                    JOptionPane.ERROR_MESSAGE);
            }
            
            // save image if specified
            try {
                String filename = dialogInputFile.getText();
                if (filename.length() > 0) {
                    animal.getPicture().saveToDB(filename);
                }

                // hide dialog
                animalDialog.setVisible(false);

                // select the last animal (newly added)
                itemList.setSelectedIndex(itemListModel.size() - 1);
            } catch (SQLException | IOException ex) {
                JOptionPane.showMessageDialog(this,
                    "Nepodařilo se uložit obrázek zvířete: " + ex.getMessage(),
                    "Chyba",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_dialogAddButtonActionPerformed

    private void dialogCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dialogCancelButtonActionPerformed
        animalDialog.setVisible(false);
    }//GEN-LAST:event_dialogCancelButtonActionPerformed

    private void dialogBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dialogBrowseActionPerformed
        JFileChooser fileChooser = initFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            dialogInputFile.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_dialogBrowseActionPerformed

    private void butttonChangeImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butttonChangeImgActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze provádět změny obrázku.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        JFileChooser fileChooser = initFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        // user choosed an image
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            
            // confirm changes
            Object[] options = {"Změnit", "Zrušit"};
            int n = JOptionPane.showOptionDialog(this, 
                    "Opravdu chcete změnit tento obrázek?",
                    "Změnit obrázek",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, 
                    null, 
                    options, 
                    options[0]);
            // change canceled
            if (n == 1) return;
        
            try {
                Picture pic = animalList.get(index).getPicture();
                pic.saveToDB(selectedFile.getAbsolutePath());
                displayImage(pic.getImageIcon());
            } catch (SQLException | IOException ex) {
                JOptionPane.showMessageDialog(this, 
                    "Nepodařilo se změnit obrázek: " + ex.getMessage(),
                    "Chyba",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_butttonChangeImgActionPerformed

    private void buttonDeleteImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteImgActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze provádět změny obrázku.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Object[] options = {"Odstranit", "Zrušit"};
        int n = JOptionPane.showOptionDialog(this, 
                "Opravdu chcete odstranit tento obrázek z databáze?",
                "Odstranit obrázek",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                options, 
                options[0]);
        // deletion canceled
        if (n == 1) return;
        
        try {
            Picture pic = animalList.get(index).getPicture();
            pic.deleteFromDB();
            displayImage(pic.getImageIcon());
        }
        catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, 
                "Nepodařilo se odstranit obrázek: " + ex.getMessage(),
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeleteImgActionPerformed

    private void buttonRotateLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRotateLeftActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze provádět změny obrázku.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            Picture pic = animalList.get(index).getPicture();
            pic.rotate(-90);
            displayImage(pic.getImageIcon());
        }
        catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, 
                "Nepodařilo se otočit obrázek: " + ex.getMessage(),
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonRotateLeftActionPerformed

    private void buttonRotateRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRotateRightActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze provádět změny obrázku.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            Picture pic = animalList.get(index).getPicture();
            pic.rotate(90);
            displayImage(pic.getImageIcon());
        }
        catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, 
                "Nepodařilo se otočit obrázek: " + ex.getMessage(),
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonRotateRightActionPerformed

    private void buttonHorizontalFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHorizontalFlipActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze provádět změny obrázku.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            Picture pic = animalList.get(index).getPicture();
            pic.flip(Picture.FLIP_HORIZONTAL);
            displayImage(pic.getImageIcon());
        }
        catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, 
                "Nepodařilo se převrátit obrázek: " + ex.getMessage(),
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonHorizontalFlipActionPerformed

    private void buttonVerticalFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVerticalFlipActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze provádět změny obrázku.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            Picture pic = animalList.get(index).getPicture();
            pic.flip(Picture.FLIP_VERTICAL);
            displayImage(pic.getImageIcon());
        }
        catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, 
                "Nepodařilo se převrátit obrázek: " + ex.getMessage(),
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonVerticalFlipActionPerformed

    private void imgWrapperComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_imgWrapperComponentResized
        int index = itemList.getSelectedIndex();
        if (index == -1) return;
        
        try {
            displayImage(animalList.get(index).getPicture().getImageIcon());
        } catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, 
                "Nepodařilo se zobrazit obrázek: " + ex.getMessage(),
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_imgWrapperComponentResized

    private void buttonBrightnessMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBrightnessMinusActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze provádět změny obrázku.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            Picture pic = animalList.get(index).getPicture();
            pic.changeBrightness(Picture.BRIGHTNESS_DARKEN);
            displayImage(pic.getImageIcon());
        }
        catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, 
                "Nepodařilo se snížit jas obrázku: " + ex.getMessage(),
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonBrightnessMinusActionPerformed

    private void buttonBrightnessPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBrightnessPlusActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if(animalList.get(index).getValid_to() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento záznam zvířete není aktuální, proto nelze provádět změny obrázku.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            Picture pic = animalList.get(index).getPicture();
            pic.changeBrightness(Picture.BRIGHTNESS_BRIGHTEN);
            displayImage(pic.getImageIcon());
        }
        catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, 
                "Nepodařilo se zvýšit jas obrázku: " + ex.getMessage(),
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonBrightnessPlusActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        initialized = false;
        initContent();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void buttonSearchCurButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchCurButtonActionPerformed
        int index = itemList.getSelectedIndex();
        // none of the animals is selected
        if (index == -1) return;
                
        try {
            Picture pic = animalList.get(index).getPicture();
            // no image available
            if (pic.getImageIcon() == null) {
                JOptionPane.showMessageDialog(this, 
                    "Toto zvíře nemá specifikovaný obrázek",
                    "Chyba",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            int similar = pic.findTheMostSimilar();
            // similar not found
            if (similar == -1) {
                throw new SQLException();
            }
            for (Animal animal : animalList) {
                if (similar == animal.getAnimalID()) {
                    itemList.setSelectedIndex(animalList.indexOf(animal));
                }
            }
        }
        catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, 
                "Nepodařilo se vyhledat podobný obrázek: " + ex.getMessage(),
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonSearchCurButtonActionPerformed

    private void buttonSearchFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchFileButtonActionPerformed
        JFileChooser fileChooser = initFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            try {
                int similar = animalList.get(0).getPicture().findTheMostSimilarToFile(selectedFile.getAbsolutePath());
                // similar not found
                if (similar == -1) {
                    throw new SQLException();
                }
                for (Animal animal : animalList) {
                    if (similar == animal.getAnimalID()) {
                        itemList.setSelectedIndex(animalList.indexOf(animal));
                    }
                }
            }
            catch (SQLException | IOException ex) {
                JOptionPane.showMessageDialog(this, 
                    "Nepodařilo se vyhledat podobný obrázek: " + ex.getMessage(),
                    "Chyba",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_buttonSearchFileButtonActionPerformed

    private void comboViewItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboViewItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // refresh animal list after change of filter option
            reinitializeAnimalList(-1);
        }
    }//GEN-LAST:event_comboViewItemStateChanged

    private void comboEncFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboEncFilterItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // refresh animal list after change of filter option
            reinitializeAnimalList(-1);
        }
    }//GEN-LAST:event_comboEncFilterItemStateChanged

    // Custom variables
    private DefaultListModel itemListModel;
    private AnimalList animalList;
    private ArrayList<IDNamePair> speciesList;
    private ArrayList<IDNamePair> enclosureList;
    private ArrayList<IDNamePair> enclosureFilterList;

    int prevIndex;
    boolean initialized;
    File selectedFile;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel animalChangesPanel;
    private javax.swing.JPanel animalDBPanel;
    private javax.swing.JPanel animalDataPanel;
    private javax.swing.JDialog animalDialog;
    private javax.swing.JPanel animalPicEditPanel;
    private javax.swing.JPanel animalSearchPanel;
    private javax.swing.JButton butonAddAnimal;
    private javax.swing.JButton buttonBrightnessMinus;
    private javax.swing.JButton buttonBrightnessPlus;
    private javax.swing.JButton buttonCancelAnimal;
    private javax.swing.JButton buttonDeleteAnimal;
    private javax.swing.JButton buttonDeleteImg;
    private javax.swing.JButton buttonHorizontalFlip;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonRotateLeft;
    private javax.swing.JButton buttonRotateRight;
    private javax.swing.JButton buttonSaveAnimal;
    private javax.swing.JButton buttonSearchCurButton;
    private javax.swing.JButton buttonSearchFileButton;
    private javax.swing.JButton buttonVerticalFlip;
    private javax.swing.JButton butttonChangeImg;
    private javax.swing.JComboBox<String> comboDialogEnclosure;
    private javax.swing.JComboBox<String> comboDialogSpecies;
    private javax.swing.JComboBox<String> comboEncFilter;
    private javax.swing.JComboBox<String> comboEnclosure;
    private javax.swing.JComboBox<String> comboSpecies;
    private javax.swing.JComboBox<String> comboView;
    private org.jdesktop.swingx.JXDatePicker dateValidFrom;
    private org.jdesktop.swingx.JXDatePicker dateValidTo;
    private javax.swing.JButton dialogAddButton;
    private javax.swing.JButton dialogBrowse;
    private javax.swing.JButton dialogCancelButton;
    private javax.swing.JTextField dialogInputFile;
    private javax.swing.JTextField dialogInputID;
    private javax.swing.JTextField dialogInputName;
    private org.jdesktop.swingx.JXDatePicker dialogInputValidFrom;
    private javax.swing.JLabel dialogLabelEnclosure;
    private javax.swing.JLabel dialogLabelID;
    private javax.swing.JLabel dialogLabelImage;
    private javax.swing.JLabel dialogLabelName;
    private javax.swing.JLabel dialogLabelSpecies;
    private javax.swing.JLabel dialogLabelValidFrom;
    private javax.swing.JLabel imgHolder;
    private javax.swing.JPanel imgWrapper;
    private javax.swing.JList<String> itemList;
    private javax.swing.JLabel labelEncFilter;
    private javax.swing.JLabel labelEnclosure;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelImgBrightness;
    private javax.swing.JLabel labelImgFlip;
    private javax.swing.JLabel labelImgRotation;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelSpecies;
    private javax.swing.JLabel labelValidFrom;
    private javax.swing.JLabel labelValidTo;
    private javax.swing.JLabel labelView;
    private javax.swing.JLabel noImgLabel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextField textFieldID;
    private javax.swing.JTextField textFieldName;
    // End of variables declaration//GEN-END:variables
}
