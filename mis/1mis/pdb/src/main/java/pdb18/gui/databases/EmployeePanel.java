/* Databases package */
package pdb18.gui.databases;

/* IMPORTS */
import pdb18.gui.employees.Employee;
import pdb18.connection.OracleDBConnection;

import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 * Graphic panel with list of employees.
 * Allows user to display, modify or add employees.
 * 
 * @author Vit Ambroz (xambro15@stud.fit.vutbr.cz)
 */
public class EmployeePanel extends javax.swing.JPanel {

    /**
     * Creates new form EmployeePanel
     */
    public EmployeePanel() {
        initComponents();
        initDatePickers();
        viewDateInterval(false);
        
        initialized = false;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        addDialog = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        inputNameAdd = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        inputSurnameAdd = new javax.swing.JTextField();
        inputBirthNumAdd = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        buttonAdd = new javax.swing.JButton();
        inputBirthDateAdd = new org.jdesktop.swingx.JXDatePicker();
        inputValidFromAdd = new org.jdesktop.swingx.JXDatePicker();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        jList = new javax.swing.JList<>();
        buttonNewEmp = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        inputName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        inputSurname = new javax.swing.JTextField();
        inputBirthNum = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        buttonSave = new javax.swing.JButton();
        inputBirthDate = new org.jdesktop.swingx.JXDatePicker();
        inputValidFrom = new org.jdesktop.swingx.JXDatePicker();
        inputValidTo = new org.jdesktop.swingx.JXDatePicker();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        sortBySelect = new javax.swing.JComboBox<>();
        viewFilter = new javax.swing.JComboBox<>();
        jLabelOd = new javax.swing.JLabel();
        jLabelDo = new javax.swing.JLabel();
        inputDateFrom = new org.jdesktop.swingx.JXDatePicker();
        inputDateTo = new org.jdesktop.swingx.JXDatePicker();
        buttonView = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();

        addDialog.setTitle("pdb18 - Přidat zaměstnance");
        addDialog.setBounds(new java.awt.Rectangle(0, 0, 720, 520));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(29, 161, 242)));
        jPanel2.setMinimumSize(new java.awt.Dimension(600, 480));
        jPanel2.setPreferredSize(new java.awt.Dimension(700, 500));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(29, 161, 242), 1, true));

        inputNameAdd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inputNameAdd.setForeground(new java.awt.Color(68, 68, 68));
        inputNameAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(68, 68, 68));
        jLabel13.setText("*Jméno:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(68, 68, 68));
        jLabel14.setText("*Příjmení:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(68, 68, 68));
        jLabel15.setText("*Rodné číslo:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(68, 68, 68));
        jLabel16.setText("*Datum narození:");

        inputSurnameAdd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inputSurnameAdd.setForeground(new java.awt.Color(68, 68, 68));
        inputSurnameAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        inputBirthNumAdd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inputBirthNumAdd.setForeground(new java.awt.Color(68, 68, 68));
        inputBirthNumAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(68, 68, 68));
        jLabel17.setText("*Zaměstnán od:");

        buttonAdd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonAdd.setForeground(new java.awt.Color(68, 68, 68));
        buttonAdd.setText("Přidat zaměstnance");
        buttonAdd.setToolTipText("");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        inputBirthDateAdd.setForeground(new java.awt.Color(68, 68, 68));

        inputValidFromAdd.setForeground(new java.awt.Color(68, 68, 68));

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(68, 68, 68));
        jLabel18.setText("* povinné údaje");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(68, 68, 68));
        jLabel19.setText("* formát datum: 24.12.2010");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15)
                            .addComponent(inputNameAdd)
                            .addComponent(jLabel17)
                            .addComponent(inputBirthNumAdd)
                            .addComponent(inputValidFromAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14)
                            .addComponent(jLabel16)
                            .addComponent(inputSurnameAdd)
                            .addComponent(inputBirthDateAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addGap(35, 35, 35))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputNameAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputSurnameAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputBirthNumAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(inputBirthDateAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputValidFromAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addGap(32, 32, 32)
                .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.add(jPanel3, new java.awt.GridBagConstraints());

        javax.swing.GroupLayout addDialogLayout = new javax.swing.GroupLayout(addDialog.getContentPane());
        addDialog.getContentPane().setLayout(addDialogLayout);
        addDialogLayout.setHorizontalGroup(
            addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        addDialogLayout.setVerticalGroup(
            addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setFocusable(false);
        setMinimumSize(new java.awt.Dimension(792, 552));

        jList.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jList.setForeground(new java.awt.Color(68, 68, 68));
        jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component c = super.getListCellRendererComponent( list, value, index, isSelected, cellHasFocus );

                Employee emp = m_Employees.get(index);
                if ( emp.getValidTo() != null ) {
                    c.setForeground(Color.RED);
                }
                return c;
            }
        });
        jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListValueChanged(evt);
            }
        });
        jScrollPane.setViewportView(jList);

        buttonNewEmp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonNewEmp.setForeground(new java.awt.Color(68, 68, 68));
        buttonNewEmp.setText("Nový zaměstnanec");
        buttonNewEmp.setToolTipText("");
        buttonNewEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewEmpActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(29, 161, 242), 1, true));

        inputName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inputName.setForeground(new java.awt.Color(68, 68, 68));
        inputName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(68, 68, 68));
        jLabel1.setText("*Jméno:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(68, 68, 68));
        jLabel2.setText("*Příjmení:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(68, 68, 68));
        jLabel3.setText("*Rodné číslo:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(68, 68, 68));
        jLabel4.setText("*Datum narození:");

        inputSurname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inputSurname.setForeground(new java.awt.Color(68, 68, 68));
        inputSurname.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        inputBirthNum.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inputBirthNum.setForeground(new java.awt.Color(68, 68, 68));
        inputBirthNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        inputBirthNum.setDisabledTextColor(new java.awt.Color(51, 153, 255));
        inputBirthNum.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(68, 68, 68));
        jLabel5.setText("*Zaměstnán od:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(68, 68, 68));
        jLabel6.setText("*Zaměstnán do:");

        buttonSave.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonSave.setForeground(new java.awt.Color(68, 68, 68));
        buttonSave.setText("Uložit změny");
        buttonSave.setToolTipText("");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        inputBirthDate.setForeground(new java.awt.Color(68, 68, 68));

        inputValidFrom.setForeground(new java.awt.Color(68, 68, 68));
        inputValidFrom.setEnabled(false);

        inputValidTo.setForeground(new java.awt.Color(68, 68, 68));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(68, 68, 68));
        jLabel11.setText("* povinné údaje");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(68, 68, 68));
        jLabel12.setText("* formát datum: 24.12.2000");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(inputName)
                            .addComponent(jLabel5)
                            .addComponent(inputBirthNum)
                            .addComponent(inputValidFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(inputSurname)
                            .addComponent(jLabel6)
                            .addComponent(inputValidTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputBirthNum, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(inputBirthDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputValidFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputValidTo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addGap(37, 37, 37)
                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(68, 68, 68));
        jLabel7.setText("Seznam zaměstnanců");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(68, 68, 68));
        jLabel8.setText("Vybraný zaměstnanec");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(68, 68, 68));
        jLabel9.setText("Zobrazit zaměstnance:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(68, 68, 68));
        jLabel10.setText("Seřadit podle:");

        sortBySelect.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sortBySelect.setForeground(new java.awt.Color(68, 68, 68));
        sortBySelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Příjmení", "Jména", "Rodného čísla", "Data narození", "Data nástupu" }));
        sortBySelect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sortBySelectItemStateChanged(evt);
            }
        });

        viewFilter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewFilter.setForeground(new java.awt.Color(68, 68, 68));
        viewFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Všechny", "Současné", "Bývalé", "V daném období" }));
        viewFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewFilterItemStateChanged(evt);
            }
        });

        jLabelOd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelOd.setForeground(new java.awt.Color(68, 68, 68));
        jLabelOd.setText("Od:");

        jLabelDo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelDo.setForeground(new java.awt.Color(68, 68, 68));
        jLabelDo.setText("Do:");

        buttonView.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonView.setForeground(new java.awt.Color(68, 68, 68));
        buttonView.setText("Zobrazit");
        buttonView.setToolTipText("");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });

        buttonRefresh.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonRefresh.setForeground(new java.awt.Color(68, 68, 68));
        buttonRefresh.setToolTipText("");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel10)
                                .addComponent(jLabel9))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(viewFilter, 0, 142, Short.MAX_VALUE)
                                .addComponent(sortBySelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(51, 51, 51)
                        .addComponent(buttonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(24, 24, 24)
                            .addComponent(buttonNewEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelOd)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(inputDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabelDo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(inputDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonView)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(viewFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelOd)
                    .addComponent(buttonView)
                    .addComponent(inputDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDo))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(sortBySelect, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8)
                        .addComponent(buttonNewEmp))
                    .addComponent(buttonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void buttonNewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewEmpActionPerformed
        // set default values
        initAddInputsValues();
        // set default format of inputs
        initAddInputsDesign();
        // show dialog for adding employee in center
        addDialog.setMinimumSize(new java.awt.Dimension(700, 500));
        addDialog.pack();
        addDialog.setLocationRelativeTo(null);
        addDialog.setVisible(true);
    }//GEN-LAST:event_buttonNewEmpActionPerformed
    
    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // get selected index
        int index = jList.getSelectedIndex();
        if (index == -1) return;
        
        // info for user - cannot modify past record of animal
        if (m_Employees.get(index).getValidTo() != null) {
            JOptionPane.showMessageDialog(this,
                "Tento zaměstnanec již zde nepracuje, proto nelze provádět změny.",
                "Chyba",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (inputValidTo.getDate() != null) {
            if (inputValidTo.getDate().getTime() > new java.util.Date().getTime()) {
                JOptionPane.showMessageDialog(this,
                    "Hodnota 'Záměstnán do' nemůže být v budoucnosti.",
                    "Chyba",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }  
        }

        // check correct format of inputs
        if (!checkEditInputs()) {
            JOptionPane.showMessageDialog(null, "Inputs are empty or bad formatted.", "User input error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // try to update selected employee
            UpdateEmployeeInDatabase();
            String message = "Employee '" + 
                inputBirthNum.getText() + " - " + inputSurname.getText() + " " + inputName.getText() + 
                "' has been succesfully updated.";
            JOptionPane.showMessageDialog(null, message, "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // reload employees list
            loadFromDatabase();
            
            // set empty values of inputs
            initEditInputsValues();
            // set empty values of inputs
            initEditInputsDesign();
        }
        catch (Exception e) {
            System.err.println("Exception: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error with database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListValueChanged
        if (!evt.getValueIsAdjusting()) {
            int selectedIndex = jList.getSelectedIndex();
            // FIX!
            // for some reason this event is fired also when changing state of sortBySelect in some situations
            if (selectedIndex <  0) return;
            
            Employee selectedEmployee = m_Employees.get(selectedIndex);
            showEmployee(selectedEmployee);
        }
    }//GEN-LAST:event_jListValueChanged

    private void sortBySelectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sortBySelectItemStateChanged
        // state is changed
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // set empty values of inputs
            initEditInputsValues();
            // set default format of inputs
            initEditInputsDesign();
            // reload employees list
            loadFromDatabase();
        }
    }//GEN-LAST:event_sortBySelectItemStateChanged
    
		
    private void viewFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewFilterItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // set empty values of inputs
            initEditInputsValues();
            // set default format of inputs
            initEditInputsDesign();
            
            if (viewFilter.getSelectedIndex() == 3) {
                // display interval inputs
                viewDateInterval(true);
            }
            else {
                // else hide all interval inputs
                viewDateInterval(false);
            }
            
            // reload employees list
            loadFromDatabase();
        }
    }//GEN-LAST:event_viewFilterItemStateChanged
    
    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // check correct format of inputs
        if (!checkAddInputs()) {
            JOptionPane.showMessageDialog(null, "Inputs are empty or bad formatted.", "User input error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // try to insert new employee
            AddToDatabase();
            String message = "Employee '" + 
                inputBirthNumAdd.getText() + " - " + inputSurnameAdd.getText() + " " + inputNameAdd.getText() + 
                "' has been succesfully added.";
            JOptionPane.showMessageDialog(null, message, "Success", JOptionPane.INFORMATION_MESSAGE);
            // close dialog
            addDialog.dispose();
            
            // reload employees list
            loadFromDatabase();
        }
        catch (Exception e) {
            System.err.println("Exception: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error with database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        // set empty values of inputs
        initEditInputsValues();
        // set default format of inputs
        initEditInputsDesign();

        // reload employees list
        loadFromDatabase();
    }//GEN-LAST:event_buttonViewActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        // set empty values of inputs
        initEditInputsValues();
        // set default format of inputs
        initEditInputsDesign();

        // reload employees list
        loadFromDatabase();
    }//GEN-LAST:event_buttonRefreshActionPerformed
    
    
    /**
     * Initializes the content of the database and displays it in GUI.
     */
    public void initContent() {
        if (initialized) return;
        
        initDatePickers();
        viewDateInterval(false);
        
        // button refresh initialization
        int h = 20, w = 20;
        Insets insets= new Insets(0, 0, 0, 0);
        buttonRefresh.setMargin(insets);
        // load icon
        ImageIcon refresh = new ImageIcon("src/main/resources/icons/refresh.png");
        Image scaledImg = refresh.getImage().getScaledInstance(h, w, Image.SCALE_SMOOTH);
        buttonRefresh.setIcon(new ImageIcon(scaledImg));
        
        
        m_Employees = new pdb18.gui.employees.EmployeeList();
        m_listModel = new javax.swing.DefaultListModel();
        
        // get the employees from the database
        loadFromDatabase();
        
        initialized = true;
    }
    
    /**
     * Load current employees from database a initialize list in GUI
     */
    public void loadFromDatabase()
    {
        m_Employees.clear();
        m_listModel.removeAllElements();
        
        // get the employees from the database
        try {
            m_Employees.fill(OracleDBConnection.getConnection(), viewFilter.getSelectedIndex(), sortBySelect.getSelectedIndex(), inputDateFrom.getDate(), inputDateTo.getDate());
            // initialize list model
            for (Employee emp : m_Employees) {
                m_listModel.addElement(emp.getBirthNum()+ " - " + emp.getSurname() + " " + emp.getName());
            }
            jList.setModel(m_listModel);
        }
        catch (SQLException sqlException) {
            JOptionPane.showMessageDialog(this,
                    sqlException.getMessage(),
                    "SQL Chyba",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Add new employee to database
     * @throws Exception SQL error
     */
    private void AddToDatabase() throws Exception
    {
        Connection conn = OracleDBConnection.getConnection();

        try {
            conn.setAutoCommit(false);
            
            // insert employee
            try (PreparedStatement istmt = conn.prepareStatement("INSERT INTO zamestnanec (rodne_cislo, jmeno, prijmeni, datum_narozeni, validni_od) VALUES(?, ?, ?, ?, ?)")) {
                istmt.setNString(1, inputBirthNumAdd.getText());
                istmt.setNString(2, inputNameAdd.getText());
                istmt.setNString(3, inputSurnameAdd.getText());
                istmt.setDate(4, new java.sql.Date(inputBirthDateAdd.getDate().getTime()));
                istmt.setDate(5, new java.sql.Date(inputValidFromAdd.getDate().getTime()));
                
                istmt.executeUpdate();
            }
            conn.commit();
        }
        catch (Exception e) {
            conn.rollback();
            throw e;
        }
        finally {
            conn.setAutoCommit(true);
        }
    }
    
    /**
     * Update valid employee record in database
     * @throws Exception SQL error
     */
    private void UpdateEmployeeInDatabase() throws Exception
    {
        Connection conn = OracleDBConnection.getConnection();

        try {
            conn.setAutoCommit(false);
            
            // insert employee
            try (PreparedStatement ustmt = conn.prepareStatement("UPDATE zamestnanec SET jmeno = ?, prijmeni = ?, datum_narozeni = ?, validni_do = ? WHERE rodne_cislo = ? AND validni_od = ?")) {
                
                ustmt.setNString(1, inputName.getText());
                ustmt.setNString(2, inputSurname.getText());
                ustmt.setDate(3, new java.sql.Date(inputBirthDate.getDate().getTime()));
                if (inputValidTo.getDate() != null) {
                    ustmt.setDate(4, new java.sql.Date(inputValidTo.getDate().getTime()));   
                }
                else {
                    ustmt.setDate(4, null);
                }
                ustmt.setNString(5, inputBirthNum.getText());
                ustmt.setDate(6, new java.sql.Date(inputValidFrom.getDate().getTime()));
                
                ustmt.executeUpdate();
            }
            conn.commit();
        }
        catch (Exception e) {
            conn.rollback();
            throw e;
        }
        finally {
            conn.setAutoCommit(true);
        }
    }
    
    
    /*---------------------------------------------------*/
    /* Methods for initializing and checking user inputs */
    /*---------------------------------------------------*/
    
    /**
     * Display information about selected employee
     * @param emp Employee to be displayed
     */
    private void showEmployee(Employee emp) {
        if (emp != null) {
            // forbid changes for past employee records
            if (emp.getValidTo() != null) {
                inputName.setEnabled(false);
                inputSurname.setEnabled(false);
                inputBirthDate.setEnabled(false);
                inputValidTo.setEnabled(false);
            }
            else { // allow changes for current records
                inputName.setEnabled(true);
                inputSurname.setEnabled(true);
                inputBirthDate.setEnabled(true);
                inputValidTo.setEnabled(true);
            }
            
            // add values to inputs
            inputName.setText(emp.getName());
            inputSurname.setText(emp.getSurname());
            inputBirthNum.setText(emp.getBirthNum());
            
            inputBirthDate.setDate(emp.getBirthDate());
            inputValidFrom.setDate(emp.getValidFrom());
            inputValidTo.setDate(emp.getValidTo());
        }
    }
    
    /**
     * Initializing datepickers to proper format
     */
    private void initDatePickers() {
        // united date format
	java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("dd.MM.yyyy");
        final java.util.Date startDate = new java.util.Date(0);//01.01.1970
        format.set2DigitYearStart(startDate);
        
        // inputs for filter interval
        inputDateFrom.setFont(new java.awt.Font("Tahoma", 0, 14));
	inputDateFrom.setFormats(format);
	inputDateTo.setFont(new java.awt.Font("Tahoma", 0, 14));
        inputDateTo.setFormats(format);
        // inputs in edit panel
        inputBirthDate.setFont(new java.awt.Font("Tahoma", 0, 18));
        inputBirthDate.setFormats(format);
	inputValidFrom.setFont(new java.awt.Font("Tahoma", 0, 18));
	inputValidFrom.setFormats(format);
	inputValidTo.setFont(new java.awt.Font("Tahoma", 0, 18));
        inputValidTo.setFormats(format);
        // inputs in addDialog
        inputBirthDateAdd.setFont(new java.awt.Font("Tahoma", 0, 18));
        inputBirthDateAdd.setFormats(format);
	inputValidFromAdd.setFont(new java.awt.Font("Tahoma", 0, 18));
	inputValidFromAdd.setFormats(format);
    }
    
    /**
     * Checking format of inputs in add new employee dialog
     * @return True if inputs are in correct format, else False
     */
    private boolean checkAddInputs() {
        // flag for correct format of inputs
        boolean check = true;
        // light red color
        Color errorColor = new Color(255, 200, 200);
        // set default format of inputs
        initAddInputsDesign();
        
        // check format of inputs
        if (inputBirthNumAdd.getText().isEmpty()) {
            inputBirthNumAdd.setBackground(errorColor);
            check = false;
        }
        if (inputNameAdd.getText().isEmpty()) {
            inputNameAdd.setBackground(errorColor);
            check = false;
        }
        if (inputSurnameAdd.getText().isEmpty()) {
            inputSurnameAdd.setBackground(errorColor);
            check = false;
        }
        if (inputBirthDateAdd.getDate() == null) {
            inputBirthDateAdd.setBorder(javax.swing.BorderFactory.createLineBorder(errorColor, 4));
            check = false;
        }
        if (inputValidFromAdd.getDate() == null) {
            inputValidFromAdd.setBorder(javax.swing.BorderFactory.createLineBorder(errorColor, 4));
            check = false;
        }
        
        return check;
    }
    
    /**
     * Checking format of inputs in edit form
     * @return True if inputs are in correct format, else False
     */
    private boolean checkEditInputs() {
        // flag for correct format of inputs
        boolean check = true;
        // light red color
        Color errorColor = new Color(255, 200, 200);
        // set default format of inputs
        initEditInputsDesign();
        
        // check format of inputs
        if (inputName.getText().isEmpty()) {
            inputName.setBackground(errorColor);
            check = false;
        }
        if (inputSurname.getText().isEmpty()) {
            inputSurname.setBackground(errorColor);
            check = false;
        }
        if (inputBirthDate.getDate() == null) {
            inputBirthDate.setBorder(javax.swing.BorderFactory.createLineBorder(errorColor, 4));
            check = false;
        }
        if (inputValidTo.getDate() == null) {
        }
        
        return check;
    }
    
    /**
     * Initializing default values in inputs in add new employee dialog
     */
    private void initAddInputsValues() {
        // set empty values of inputs
        inputNameAdd.setText("");
        inputSurnameAdd.setText("");
        inputBirthNumAdd.setText("");
        inputBirthDateAdd.setDate(null);
        inputValidFromAdd.setDate(null);
    }
    
    /**
     * Initializing default design of inputs in add new employee dialog
     */
    private void initAddInputsDesign() {
        // set default backgrounds to inputs
        inputBirthNumAdd.setBackground(Color.WHITE);
        inputNameAdd.setBackground(Color.WHITE);
        inputSurnameAdd.setBackground(Color.WHITE);
        inputBirthDateAdd.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        inputValidFromAdd.setBorder(javax.swing.BorderFactory.createEmptyBorder());
    }
    
    /**
     * Initializing default values in inputs in edit form
     */
    private void initEditInputsValues() {
        // set empty values of inputs
        inputName.setText("");
        inputSurname.setText("");
        inputBirthNum.setText("");
        inputBirthDate.setDate(null);
        inputValidFrom.setDate(null);
        inputValidTo.setDate(null);
    }
    
    /**
     * Initializing default design of inputs in edit form
     */
    private void initEditInputsDesign() {
        // set default backgrounds to inputs
        inputName.setBackground(Color.WHITE);
        inputSurname.setBackground(Color.WHITE);
        inputBirthDate.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        inputValidTo.setBorder(javax.swing.BorderFactory.createEmptyBorder());
    }
    
    /**
     * Showing or hiding interval datepickers, labels and button
     * @param view true for showing, false for hiding
     */
    private void viewDateInterval(boolean view) {
        jLabelOd.setVisible(view);
        inputDateFrom.setVisible(view);
        jLabelDo.setVisible(view);
        inputDateTo.setVisible(view);
        buttonView.setVisible(view);
    }
    
    // Custom variables
    private pdb18.gui.employees.EmployeeList m_Employees;
    private javax.swing.DefaultListModel m_listModel;
    private boolean initialized;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addDialog;
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonNewEmp;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonView;
    private org.jdesktop.swingx.JXDatePicker inputBirthDate;
    private org.jdesktop.swingx.JXDatePicker inputBirthDateAdd;
    private javax.swing.JTextField inputBirthNum;
    private javax.swing.JTextField inputBirthNumAdd;
    private org.jdesktop.swingx.JXDatePicker inputDateFrom;
    private org.jdesktop.swingx.JXDatePicker inputDateTo;
    private javax.swing.JTextField inputName;
    private javax.swing.JTextField inputNameAdd;
    private javax.swing.JTextField inputSurname;
    private javax.swing.JTextField inputSurnameAdd;
    private org.jdesktop.swingx.JXDatePicker inputValidFrom;
    private org.jdesktop.swingx.JXDatePicker inputValidFromAdd;
    private org.jdesktop.swingx.JXDatePicker inputValidTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelDo;
    private javax.swing.JLabel jLabelOd;
    private javax.swing.JList<String> jList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private javax.swing.JComboBox<String> sortBySelect;
    private javax.swing.JComboBox<String> viewFilter;
    // End of variables declaration//GEN-END:variables
}
